// Copyright 2017 Emilie Gillet.
//
// Author: Emilie Gillet (emilie.o.gillet@gmail.com)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
// 
// See http://creativecommons.org/licenses/MIT/ for more information.
//
// -----------------------------------------------------------------------------
//
// Lightweight DAC driver used for the firmware update procedure.
// Initializes the I2S port as SPI, and relies on a timer for clock generation.

#include "waves/drivers/lcd.h"
#include "waves/Display.h"

namespace waves {

uint8_t pic1[]=
{/*--  µ÷ÈëÁËÒ»·ùÍ¼Ïñ£ºD:\liu\ÏÔÊ¾Í¼Æ¬\12864LOGO.bmp  --*/
/*--  ¿í¶Èx¸ß¶È=128x64  --*/
0xFF,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0xC1,0xE1,0xF1,0xFD,0xFF,0xFF,0xFD,0x01,0x61,0xF1,0xE1,0xE1,0xE1,
0xE1,0xC1,0xC1,0xC1,0xC1,0xC1,0x81,0x81,0x81,0x81,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x81,0xE1,0x79,0x7F,0xFF,0xC1,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0xE1,0xF1,0xF9,0xFD,0xFD,0xFF,0xFF,0x7D,0x7D,0x31,0xF9,0x29,0x01,
0x05,0x07,0x07,0x03,0x05,0x05,0x05,0x05,0x05,0x05,0x4D,0xDD,0x61,0x81,0x81,0x01,
0xC1,0xC1,0xE1,0xE1,0xC1,0x81,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0xFF,
0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x0F,0x7F,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x3F,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFE,
0xFE,0xFE,0xFE,0xFC,0xFC,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x18,0x18,0x3C,0x3E,0x3F,0x38,0x33,0x30,0x38,0x3F,0x3E,0xC0,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x03,0xC7,0x3F,0x0F,0x0F,0x1F,0x3F,0x7F,0xFF,0xFD,0xF9,0xFB,0xFB,
0x62,0x24,0x0C,0x0C,0x3C,0x7C,0xFC,0xFC,0xFE,0xFA,0xFA,0xF7,0xF4,0x4C,0x38,0x03,
0x0F,0x7F,0xFF,0x7F,0x7F,0x3F,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,
0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x0F,0x3E,0xFE,0xFE,0xFC,0x3C,0x7C,0x78,
0x78,0xF0,0xF0,0xF0,0xE0,0xE0,0xC3,0x3F,0xFF,0xFF,0xFF,0xE0,0x00,0x1F,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0x7F,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x11,0x3E,0x24,0x24,0x24,
0xC4,0x3C,0x18,0x06,0xF1,0xF8,0xFC,0xFE,0x0F,0x27,0x27,0x37,0x6F,0x3E,0x18,0x00,
0x00,0x00,0x00,0x60,0x58,0x4C,0xCC,0x9C,0xFC,0xFC,0xFC,0xF8,0xF0,0xE0,0x00,0x00,
0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,
0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x07,0x1F,0x7E,0xF0,0x80,
0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x00,0x01,0x0F,0xFF,0xFF,0xC0,0x00,0x0F,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0x7F,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x04,0x0C,0x08,0x08,0x08,
0x1F,0xFC,0xB0,0x60,0xC1,0x83,0x07,0x07,0x07,0x06,0x82,0x87,0x46,0x44,0x00,0x40,
0x00,0x00,0x00,0x00,0x02,0x06,0x0E,0x0E,0x1F,0x1F,0x1F,0x1F,0x0F,0x07,0x00,0x80,
0xC0,0x70,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,
0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0xE0,0xE0,0x21,0xA7,
0x60,0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x87,0x0F,0x80,0xE0,0xE3,
0x83,0x23,0xE3,0xE3,0x23,0x23,0xE3,0xC3,0x03,0x03,0x83,0xB3,0xB3,0x03,0x03,0x83,
0x83,0x80,0x00,0x80,0xB0,0xB0,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x80,
0x40,0x40,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x01,0x0E,0x38,0xC1,0x81,0xF2,0x7E,0x3C,0x1C,0x08,0x08,0x08,0x08,0x10,
0x10,0x10,0x10,0x10,0xF0,0xF0,0xF0,0x38,0x18,0x18,0x3C,0x7C,0xFE,0xF2,0x01,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,
0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x1F,0x1F,0x11,0x13,
0x18,0x00,0x1C,0x1E,0x12,0x1F,0x1F,0x10,0x1B,0x16,0x16,0x0D,0x00,0x00,0x1F,0x1F,
0x10,0x10,0x1F,0x1F,0x12,0x06,0x1D,0x18,0x10,0x00,0x10,0x1F,0x1F,0x10,0x1B,0x16,
0x16,0x0D,0x00,0x10,0x1F,0x1F,0x10,0x10,0x1F,0x1F,0x00,0x1F,0x1F,0x10,0x63,0xFF,
0x94,0x94,0xF7,0x73,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0xF8,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x02,0x08,0xB0,0x00,0x00,0x01,0x03,0x0C,0x70,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,
0xFF,0x03,0x03,0x03,0x1B,0x0B,0xFB,0xFB,0x0B,0x1B,0x03,0x83,0xC3,0x43,0xC3,0x83,
0x03,0x83,0xC3,0x43,0xC3,0x03,0x0B,0xFB,0xFB,0x43,0xC3,0xC3,0x03,0x43,0xC3,0xC3,
0x43,0xC3,0xC3,0x03,0x83,0xC3,0x43,0xC3,0x83,0x03,0x0B,0xFB,0xFB,0x03,0x83,0xC3,
0x43,0xC3,0x83,0x03,0x83,0xC3,0x43,0xC3,0xC3,0x43,0x43,0xDB,0xDB,0x03,0x83,0xC3,
0x43,0xC3,0x83,0x03,0x83,0xC3,0x43,0x43,0x03,0x03,0x03,0x03,0x03,0x03,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x7F,0xC0,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC1,0x1F,0x0F,0x06,0x02,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,
0xFF,0x80,0x80,0x80,0x80,0x84,0x87,0x87,0x84,0x80,0x80,0x83,0x87,0x85,0x85,0x85,
0x80,0x83,0x87,0x84,0x84,0x80,0x84,0x87,0x87,0x80,0x87,0x87,0x84,0x84,0x87,0x87,
0x80,0x87,0x87,0x84,0x83,0x87,0x84,0x87,0x83,0x80,0x84,0x87,0x87,0x84,0x83,0x87,
0x84,0x87,0x83,0x80,0x98,0xBF,0xA5,0xBD,0x9C,0x80,0x84,0x87,0x87,0x84,0x83,0x87,
0x85,0x85,0x85,0x80,0x85,0x85,0x87,0x83,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
0x80,0x80,0x80,0x80,0x80,0x80,0x83,0x88,0x90,0x90,0xA0,0xA0,0xA1,0xA1,0x93,0x9B,
0x91,0xA0,0xA0,0xA0,0xA0,0xA0,0xA0,0x90,0x8F,0x87,0x80,0x80,0x80,0x80,0x80,0x80,
0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0xFF

};

uint8_t pic[]=
{/*--  µ÷ÈëÁËÒ»·ùÍ¼Ïñ£ºD:\²úÆ·ÎÄ¼þ\ÏÔÊ¾Í¼Æ¬\ERC12864-4 Series.bmp  --*/
/*--  ¿í¶Èx¸ß¶È=128x64  --*/
0xFF,0x01,0x01,0xF9,0x49,0x49,0x49,0x49,0x01,0xC1,0xB1,0x89,0xB1,0xC1,0x01,0x31,
0x49,0x49,0x91,0x01,0x09,0x09,0xF9,0x09,0x09,0x01,0xF9,0x49,0x49,0xC9,0x31,0x01,
0x01,0xF9,0x01,0x01,0x31,0x49,0x49,0x91,0x01,0x01,0xF9,0x01,0x01,0xF9,0x31,0x41,
0x81,0xF9,0x01,0x01,0xF1,0x09,0x09,0x49,0xD1,0x01,0x01,0x01,0x01,0x09,0x09,0xF9,
0x09,0x09,0x01,0xF9,0x49,0x49,0x49,0x49,0x01,0xF1,0x09,0x09,0x09,0x11,0x01,0x01,
0xF9,0x41,0x41,0x41,0xF9,0x01,0x01,0x01,0x01,0x01,0xF1,0x09,0x09,0x09,0x11,0x01,
0x01,0xF1,0x09,0x09,0x09,0xF1,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0xF9,0x01,
0x01,0x01,0x09,0x09,0xF9,0x09,0x09,0x01,0xF9,0x09,0x09,0x09,0xF1,0x01,0x01,0xFF,
0xFF,0x00,0x00,0x03,0x02,0x02,0x02,0x02,0x02,0x01,0x00,0x00,0x00,0x01,0x02,0x01,
0x02,0x02,0x01,0x00,0x80,0x80,0xF3,0x80,0x80,0x00,0xE3,0x20,0x20,0x20,0xE3,0x00,
0x00,0x03,0x00,0xE0,0x21,0x22,0x22,0x21,0x20,0x20,0xF3,0x20,0x00,0x03,0x00,0x40,
0x41,0x43,0xC0,0x70,0x41,0x42,0x42,0x42,0x61,0x40,0x00,0x40,0x40,0x40,0x40,0x43,
0xD0,0x60,0x40,0x43,0x42,0x42,0x42,0x02,0x00,0x21,0x22,0xE2,0x12,0x01,0x40,0x80,
0x03,0xF0,0x00,0x00,0x03,0x80,0x80,0xF2,0x80,0x00,0x81,0x82,0x82,0xF2,0x81,0x80,
0x80,0x01,0x02,0x02,0x02,0x01,0x00,0x00,0x02,0x00,0x00,0x06,0x00,0x00,0x03,0x02,
0x02,0x02,0x00,0x00,0x03,0x00,0x00,0x00,0x03,0x02,0x02,0x02,0x01,0x00,0x00,0xFF,
0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x80,0x60,0x1F,0x00,0x7F,0x80,0x9F,0x92,0x92,0x92,0x9F,0xE0,
0x00,0x00,0x00,0xFF,0x42,0x42,0x42,0x42,0x42,0x42,0xFF,0x00,0x00,0x00,0x00,0x40,
0x26,0x15,0x0C,0x84,0xFF,0x04,0x0C,0x14,0x24,0x40,0x00,0x00,0x80,0x40,0x20,0x18,
0x07,0x42,0x82,0x42,0x3E,0x00,0x00,0x00,0x11,0x09,0x05,0xFF,0x05,0x19,0x12,0x14,
0x10,0xFF,0x08,0x08,0x00,0x08,0x84,0xFF,0x02,0x80,0x80,0x8E,0x52,0x23,0x52,0x8E,
0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,
0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,
0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xFC,0xFC,0x44,0x44,0x44,0x44,0x00,0x00,0xFC,0xFC,0x84,0x84,0x84,0xFC,0x78,0x00,
0x00,0xF0,0xF8,0x0C,0x04,0x04,0x04,0x0C,0x08,0x00,0x30,0x18,0xFC,0xFC,0x00,0x00,
0x08,0x0C,0x84,0xC4,0xFC,0x38,0x00,0xB8,0xFC,0x44,0x44,0xFC,0xB8,0x00,0xF0,0xF8,
0x44,0x44,0xCC,0x88,0x00,0x00,0xC0,0x30,0xFC,0xFC,0x00,0x00,0x80,0x80,0x80,0x00,
0x00,0xC0,0x30,0xFC,0xFC,0x00,0x00,0x00,0x00,0x60,0x90,0x90,0x10,0x10,0x20,0x00,
0x80,0x40,0x40,0x40,0x80,0x00,0xC0,0x80,0x40,0x00,0xD0,0x00,0x80,0x40,0x40,0x40,
0x80,0x00,0x80,0x40,0x40,0x40,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,
0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0F,0x0F,0x08,0x08,0x08,0x08,0x00,0x00,0x0F,0x0F,0x00,0x00,0x01,0x07,0x0E,0x08,
0x00,0x03,0x07,0x0C,0x08,0x08,0x08,0x0C,0x04,0x00,0x00,0x00,0x0F,0x0F,0x00,0x00,
0x0C,0x0E,0x0B,0x09,0x08,0x08,0x00,0x07,0x0F,0x08,0x08,0x0F,0x07,0x00,0x07,0x0F,
0x08,0x08,0x0F,0x07,0x00,0x03,0x02,0x02,0x0F,0x0F,0x02,0x00,0x00,0x00,0x00,0x00,
0x03,0x02,0x02,0x0F,0x0F,0x02,0x00,0x00,0x00,0x04,0x08,0x08,0x09,0x09,0x06,0x00,
0x07,0x09,0x09,0x09,0x05,0x00,0x0F,0x00,0x00,0x00,0x0F,0x00,0x07,0x09,0x09,0x09,
0x05,0x00,0x04,0x09,0x09,0x0A,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,
0xFF,0x00,0x00,0x80,0xC0,0x00,0x00,0x00,0x80,0x40,0x40,0x40,0x80,0x00,0x80,0x40,
0x40,0x40,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x40,0x40,0x40,0x80,0x00,
0x00,0x00,0x80,0xC0,0x00,0x00,0x00,0x00,0x00,0xC0,0x40,0x40,0x40,0x80,0x00,0x40,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x80,0x00,0x00,0x00,0xC0,
0x00,0x40,0x40,0xC0,0x40,0x40,0x00,0x40,0x40,0x40,0xC0,0x40,0x00,0x00,0xC0,0x40,
0x40,0x40,0x00,0x80,0x40,0x40,0x40,0x80,0x00,0x80,0x40,0x40,0x40,0x80,0x00,0xFF,
0xFF,0x80,0x81,0x80,0xBF,0x80,0x80,0x80,0xA0,0xB0,0xA8,0xA4,0xA3,0x80,0x9D,0xA2,
0xA2,0xA2,0x9D,0x80,0xA1,0x92,0x8C,0x92,0xA1,0x80,0x9F,0xA2,0xA2,0xA2,0x9C,0x80,
0x8C,0x8B,0x88,0xBF,0x88,0x80,0x80,0x80,0x80,0xBF,0x84,0x84,0x84,0x83,0x80,0xBF,
0x80,0xA1,0x92,0x8C,0x92,0xA1,0x80,0x9E,0xA5,0xA5,0xA5,0x96,0x80,0xBF,0x80,0x92,
0xA5,0xA5,0xA9,0x92,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0xBF,0x80,0x83,0x8C,0x90,0xBF,
0x80,0x80,0x80,0xBF,0x80,0x80,0x80,0x80,0xB8,0x86,0x81,0x80,0x80,0x93,0xA2,0xA2,
0xA2,0x9C,0x80,0x90,0xA0,0xA2,0xA2,0x9D,0x80,0xA0,0xB0,0xA8,0xA4,0xA3,0x80,0xFF


};

/* static */
LCD* LCD::instance_;

void LCD::Init() {
  instance_ = this;


  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI3, ENABLE);
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
  
  // DMA_Cmd(DMA1_Stream5, DISABLE);
  // DMA_DeInit(DMA1_Stream5);

  // Initialize LCD NSS pin.
  GPIO_InitTypeDef gpio_init;
  gpio_init.GPIO_Mode = GPIO_Mode_OUT;
  gpio_init.GPIO_OType = GPIO_OType_PP;
  gpio_init.GPIO_Speed = GPIO_Speed_2MHz;
  gpio_init.GPIO_PuPd = GPIO_PuPd_NOPULL;
  gpio_init.GPIO_Pin = GPIO_Pin_15;
  GPIO_Init(GPIOA, &gpio_init);

  // Initialize CMD NSS pin.
  gpio_init.GPIO_Mode = GPIO_Mode_OUT;
  gpio_init.GPIO_OType = GPIO_OType_PP;
  gpio_init.GPIO_Speed = GPIO_Speed_2MHz;
  gpio_init.GPIO_PuPd = GPIO_PuPd_NOPULL;
  gpio_init.GPIO_Pin = GPIO_Pin_2;
  GPIO_Init(GPIOD, &gpio_init);

  // miso - NO MASTER IN
  // gpio_init.GPIO_Mode = GPIO_Mode_AF;
  // gpio_init.GPIO_OType = GPIO_OType_PP;
  // gpio_init.GPIO_Speed = GPIO_Speed_50MHz;
  // gpio_init.GPIO_PuPd = GPIO_PuPd_NOPULL;
  // gpio_init.GPIO_Pin = eeprom[EEPROM_MISO].pin;
  // GPIO_Init(eeprom[EEPROM_MISO].gpio, &gpio_init);

  // RESET
  gpio_init.GPIO_Mode = GPIO_Mode_OUT;
  gpio_init.GPIO_OType = GPIO_OType_PP;
  gpio_init.GPIO_Speed = GPIO_Speed_2MHz;
  gpio_init.GPIO_PuPd = GPIO_PuPd_NOPULL;
  gpio_init.GPIO_Pin = GPIO_Pin_11;
  GPIO_Init(GPIOC, &gpio_init);

  // mosi
  // gpio_init.GPIO_Mode = GPIO_Mode_OUT;
  // gpio_init.GPIO_OType = GPIO_OType_PP;
  // gpio_init.GPIO_Speed = GPIO_Speed_2MHz;
  // gpio_init.GPIO_PuPd = GPIO_PuPd_NOPULL;
  // gpio_init.GPIO_Pin = GPIO_Pin_12;
  // GPIO_Init(GPIOC, &gpio_init);

  // clock
  // gpio_init.GPIO_Mode = GPIO_Mode_OUT;
  // gpio_init.GPIO_OType = GPIO_OType_PP;
  // gpio_init.GPIO_Speed = GPIO_Speed_2MHz;
  // gpio_init.GPIO_PuPd = GPIO_PuPd_NOPULL;
  // gpio_init.GPIO_Pin = GPIO_Pin_10;
  // GPIO_Init(GPIOC, &gpio_init);


  // mosi
  gpio_init.GPIO_Mode = GPIO_Mode_AF;
  gpio_init.GPIO_OType = GPIO_OType_PP;
  gpio_init.GPIO_Speed = GPIO_Speed_2MHz;
  gpio_init.GPIO_PuPd = GPIO_PuPd_NOPULL;
  gpio_init.GPIO_Pin = GPIO_Pin_12;
  GPIO_Init(GPIOC, &gpio_init);

  // // clock
  gpio_init.GPIO_Mode = GPIO_Mode_AF;
  gpio_init.GPIO_OType = GPIO_OType_PP;
  gpio_init.GPIO_Speed = GPIO_Speed_2MHz;
  gpio_init.GPIO_PuPd = GPIO_PuPd_NOPULL;
  gpio_init.GPIO_Pin = GPIO_Pin_10;
  GPIO_Init(GPIOC, &gpio_init);
  
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_SPI3);
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource12, GPIO_AF_SPI3);

  HIGH(LCD_SS);
  HIGH(LCD_CMD);
  HIGH(LCD_RESET);
  // // Initialize SPI.
  SPI_InitTypeDef spi_init;
  spi_init.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
  spi_init.SPI_Mode = SPI_Mode_Master;
  spi_init.SPI_DataSize = SPI_DataSize_8b;
  spi_init.SPI_CPOL = SPI_CPOL_Low;
  spi_init.SPI_CPHA = SPI_CPHA_1Edge;
  spi_init.SPI_NSS = SPI_NSS_Soft;
  spi_init.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4;
  spi_init.SPI_FirstBit = SPI_FirstBit_MSB;
  spi_init.SPI_CRCPolynomial = 7;
  SPI_Init(SPI3, &spi_init);

  SPI_Cmd(SPI3, ENABLE);


  // DMA_InitTypeDef dma_init;

  // // SPI TX
  // dma_init.DMA_Channel = DMA_Channel_0;
  // dma_init.DMA_PeripheralBaseAddr = (uint32_t)&(SPI3->DR);
  // dma_init.DMA_Memory0BaseAddr = (uint32_t)(lcd_buffer[0]);
  // dma_init.DMA_DIR = DMA_DIR_MemoryToPeripheral;
  // dma_init.DMA_BufferSize = 0;
  // dma_init.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  // dma_init.DMA_MemoryInc = DMA_MemoryInc_Enable;
  // dma_init.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
  // dma_init.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
  // dma_init.DMA_Mode = DMA_Mode_Normal;
  // dma_init.DMA_Priority = DMA_Priority_High;
  // dma_init.DMA_FIFOMode = DMA_FIFOMode_Disable;
  // dma_init.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
  // dma_init.DMA_MemoryBurst = DMA_MemoryBurst_Single;
  // dma_init.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
  // DMA_Init(DMA1_Stream5, &dma_init);

  // DMA_ITConfig(DMA1_Stream5, DMA_IT_TC, ENABLE);

  // // SPI_I2S_DMACmd(SPI3, SPI_I2S_DMAReq_Tx, ENABLE);

  // // Enable the IRQ.
  // NVIC_EnableIRQ(DMA1_Stream5_IRQn);
}

void LCD::StartDMARead(uint16_t __bytes) {
  // uint8_t pump = 0;

  // DMA_SetCurrDataCounter(DMA1_Stream5, __bytes);
  // DMA_SetCurrDataCounter(DMA1_Stream0, __bytes);
  // DMA1_Stream5->M0AR = (int)lcd_buffer[0];
  // DMA1_Stream0->M0AR = (int)&pump;
  // DMA_Cmd(DMA1_Stream5, ENABLE);
  // DMA_Cmd(DMA1_Stream0, ENABLE);
  // SPI_I2S_DMACmd(SPI3, SPI_I2S_DMAReq_Tx, ENABLE);
  // SPI_I2S_DMACmd(SPI3, SPI_I2S_DMAReq_Rx, ENABLE);

  // SetFlag(&_EREG_, _RXTC_, FLAG_CLEAR);
  // SetFlag(&_EREG_, _TXTC_, FLAG_CLEAR);
  // SetFlag(&_EREG_, _BUSY_, FLAG_SET);
}

void LCD::StartFrameDMARead(uint32_t * buffer, uint32_t __bytes, uint32_t address) {
  // SetFlag(&_EREG_, _RXTC_, FLAG_CLEAR);
  // SetFlag(&_EREG_, _TXTC_, FLAG_CLEAR);
  // if(GetFlag(&_EREG_, _BUSY_))
    // return;
  // SetFlag(&_EREG_, _BUSY_, FLAG_SET);

  // LOW(LCD_SS);

  // uint8_t send_buf[5];
  // send_buf[0] = READ_66MHZ;
  // send_buf[1] = ((address >> 16) & 0xFF);
  // send_buf[2] = ((address >> 8) & 0xFF);
  // send_buf[3] = ((address) & 0xFF);
  // send_buf[4] = 0x00;

  // Write(send_buf, 5);

  // SPI_I2S_SendData(SPI3, 0);
  // while (!SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE));
  // SPI_I2S_ReceiveData(SPI3);
  // while (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_RXNE)) {
  //   SPI_I2S_ReceiveData(SPI3);    
  // }

  // DMA_SetCurrDataCounter(DMA1_Stream5, __bytes);
  // DMA_SetCurrDataCounter(DMA1_Stream0, __bytes);
  // DMA1_Stream0->M0AR = (uint32_t)pump_buffer;
  // DMA1_Stream5->M0AR = (uint32_t)buffer;
  // DMA_Cmd(DMA1_Stream5, ENABLE);
  // DMA_Cmd(DMA1_Stream0, ENABLE);
  // SPI_I2S_DMACmd(SPI3, SPI_I2S_DMAReq_Tx, ENABLE);
  SPI_I2S_DMACmd(SPI3, SPI_I2S_DMAReq_Rx, ENABLE);
}

void LCD::DisplayOn() {

  LOW(LCD_CMD);
  LOW(LCD_SS);

  uint8_t send_buf = 0x28|0x07;

  Write(&send_buf, 1);

  HIGH(LCD_SS);
  HIGH(LCD_CMD);

  system_clock.Delay(1);

  LOW(LCD_CMD);
  LOW(LCD_SS);

  send_buf = 0xAF;

  Write(&send_buf, 1);

  HIGH(LCD_SS);
  HIGH(LCD_CMD);
}

void LCD::Write_Instruction(uint8_t byte) {

  // system_clock.Delay(1);

  LOW(LCD_CMD);

  // LOW(LCD_CLOCK);

  LOW(LCD_SS);

  // __asm__("nop");
  // __asm__("nop");
  // __asm__("nop");
  // __asm__("nop");
  // __asm__("nop");

  Write(&byte, 1);

  while (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_BSY));

  HIGH(LCD_SS);

  // __asm__("nop");
  // __asm__("nop");
  // __asm__("nop");
  // __asm__("nop");
  // __asm__("nop");

  return;
}


void LCD::Write_Data(uint8_t * data, uint32_t size)
{
  HIGH(LCD_CMD);

  // LOW(LCD_CLOCK);

  LOW(LCD_SS);

  // __asm__("nop");
  // __asm__("nop");
  // __asm__("nop");
  // __asm__("nop");
  // __asm__("nop");

  Write(data, size);

  while (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_BSY));

  HIGH(LCD_SS);

  // __asm__("nop");
  // __asm__("nop");
  // __asm__("nop");
  // __asm__("nop");
  // __asm__("nop");

  return;
}

void LCD::Initial() {
  // RESET

  // one cpu frame is 0.000000005952381 = 1 / 168MHz
  // or 5.952381 nanoseconds
  // clock low for min 25ns
  // high for min of 25 ns
  // 25ns = 5 noop
  // one write instruction is (9 * 10 * cpu) 
  // = 0.00000053571429 or 535.71429 ns
  // x 9 instructions = 4 us
  HIGH(LCD_RESET);
  Wait<100>();

  // loading = 30;
  LOW(LCD_RESET);
  Wait<100>();

  // loading = 40;
  HIGH(LCD_RESET);
  Wait<100>();

  Write_Instruction(0xe2);

  // referential c code
  Write_Instruction(0xa2); // set 1/9 bias
  Write_Instruction(0xa0); // seg normal direction
  // Write_Instruction(0xc0); // com reverse direction
  Write_Instruction(0xc8); // com reverse direction

  Write_Instruction(0x20 | 0x4); // regulation ratio 5.0 (0x4)

  Write_Instruction(0x81); // set ev command
  Write_Instruction(0x20); // ev=32

  Write_Instruction(0x2c); // booster on
  Write_Instruction(0x2e); // regulator on
  Write_Instruction(0x2f); // follower on

  // display on?
  loading = 42;


  loading = 43;
  Write_Instruction(0xa6);
  // Write_Instruction(0xa5);
  Write_Instruction(0xaf);

  Display_Picture(pic1);
  loading = 50;
  // // CLEAR ADC
  // Write_Instruction(0xa0);

  // // set shl
  // Write_Instruction(0xc8); // c8 or c0

  // // clear bias
  // Write_Instruction(0xa2);

  // // power control
  // Write_Instruction((0x28|0x07));

  // // regulator resistor select
  // Write_Instruction((0x20|0x05));

  // // set contrast level
  // Write_Instruction(0x81);
  // Write_Instruction(30);

  // // INITIAL LINE
  // Write_Instruction(0x40 | 0x00);

  // // display on
  // Write_Instruction(0xaf);

  // // Write_Instruction(0xa7);   //  Reverse display : 0 illuminated
  // // Write_Instruction(0xa6);   //  Normal display : 1 illuminated
  // // Write_Instruction(0xa5);   //  Entire dislay   Force whole LCD point
  // // Write_Instruction(0xa4); //  Normal display

  // // reverse display off
  // Write_Instruction(0xa6);

  // // entire display off
  // Write_Instruction(0xa4);

  // // display on
  // Write_Instruction(0xaf);

  // Display_Picture(pic);
}

void LCD::Display_Picture(uint8_t pic[])
{
    unsigned char i,j;
  Initial_Dispay_Line(0x40);
  for(i=0;i<0x08;i++)
  {
  Set_Page_Address(i);
    Set_Column_Address(0x00);
        for(j=0;j<0x80;j++)
    {
        Write_Data(&pic[i*0x80+j], 1);
    }
  }
    return;
}

void LCD::Display(uint8_t test[8][128])
{

  // uint8_t a[8][128];
  // memset(a, 0, 128*8);
  // a[4][64] = 255;
  // unsigned char page = 0, column = 0;
  Initial_Dispay_Line(0x40);
  for(unsigned char page = 0; page < 8; page++)
  {
    Set_Page_Address(page);
    Set_Column_Address(0x00);

    // Wait<800>();
    Write_Data(test[page], 128);

    // for(unsigned char column = 0; column < 128; column++)
    // {
    //     // Wait<100>();
    //     // Write_Data(test[page][column], 1);
    // }
  }
  Write_Instruction(0xaf);
    return;
}

void LCD::Initial_Dispay_Line(uint8_t line)
{
    line|=0x40;
    Write_Instruction(line);
  return;
}


// Set page address 0~15
void LCD::Set_Page_Address(uint8_t add)
{
    add=0xb0|add;
    Write_Instruction(add);
  return;
}

void LCD::Set_Column_Address(uint8_t add)
{
    Write_Instruction((0x10|(add>>4)));
  Write_Instruction((0x0f&add));
  return;
}

void LCD::DisplayOff() {

  LOW(LCD_CMD);
  LOW(LCD_SS);

  uint8_t send_buf = 0x28|0x07;

  Write(&send_buf, 1);

  HIGH(LCD_SS);
  HIGH(LCD_CMD);

  system_clock.Delay(1);

  LOW(LCD_CMD);
  LOW(LCD_SS);

  send_buf = 0xAE;

  Write(&send_buf, 1);

  HIGH(LCD_SS);
  HIGH(LCD_CMD);
}



void LCD::Draw() {
  Write_Instruction(0xB0);

  system_clock.Delay(1);

  HIGH(LCD_CMD);
  LOW(LCD_SS);

  for(int i = 0; i < 128; i++) {
    uint8_t send_buf = 0xff;

    Write(&send_buf, 1);
  }
  HIGH(LCD_SS);
}

void LCD::StartDMAWrite() {

  if(page_ == 0) {
    Initial_Dispay_Line(0x40);
  }

  Set_Page_Address(page_);
  Set_Column_Address(0x00);

  DMA_SetCurrDataCounter(DMA1_Stream5, 128);
  DMA1_Stream5->M0AR = (int)(Display::framebuffer[page_]);
  DMA_Cmd(DMA1_Stream5, ENABLE);
  SPI_I2S_DMACmd(SPI3, SPI_I2S_DMAReq_Tx, ENABLE);

  // SetFlag(&_EREG_, _RXTC_, FLAG_CLEAR);
  // SetFlag(&_EREG_, _TXTC_, FLAG_CLEAR);
  // SetFlag(&_EREG_, _BUSY_, FLAG_SET);
}

void LCD::StopDMA() {
  loading = 2;
  DMA_ClearFlag(DMA1_Stream5, DMA_FLAG_TCIF5 | DMA_FLAG_HTIF5);
  // DMA_ClearFlag(DMA1_Stream0, DMA_FLAG_TCIF0 | DMA_FLAG_HTIF0);

  // while (!SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE));
  // while (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_RXNE));
    // while (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_RXNE)) {
    // SPI_I2S_ReceiveData(SPI3);    
  // }

  DMA_Cmd(DMA1_Stream5, DISABLE);
  // DMA_Cmd(DMA1_Stream0, DISABLE);
  SPI_I2S_DMACmd(SPI3, SPI_I2S_DMAReq_Tx, DISABLE);
  // SPI_I2S_DMACmd(SPI3, SPI_I2S_DMAReq_Rx, DISABLE);

  HIGH(LCD_SS);

  // SetFlag(&_EREG_, _RXNE_, FLAG_SET);
}

}  // namespace waves


extern "C" {

// Rx Transfer complete
// void DMA1_Stream0_IRQHandler(void) {
//     loading = 1;
//   if(DMA_GetFlagStatus(DMA1_Stream0, DMA_FLAG_TCIF0)) {
//     DMA_ClearFlag(DMA1_Stream0, DMA_FLAG_TCIF0 | DMA_FLAG_HTIF0);

//     SetFlag(&_EREG_, _RXTC_, FLAG_SET);

//     // if(GetFlag(&_EREG_, _TXTC_)) {
//       waves::LCD::GetInstance()->StopDMA();
//     // }
//   }
// }

// Tx Transfer complete
void DMA1_Stream5_IRQHandler(void) {
  // loading++;
  if(DMA_GetFlagStatus(DMA1_Stream5, DMA_FLAG_TCIF5)) {
    DMA_ClearFlag(DMA1_Stream5, DMA_FLAG_TCIF5 | DMA_FLAG_HTIF5);

    waves::LCD::GetInstance()->increment_page();
    if(waves::LCD::GetInstance()->get_page() < 8) {
      waves::LCD::GetInstance()->StopDMA();
      waves::LCD::GetInstance()->StartDMAWrite();
    } else {
      waves::LCD::GetInstance()->set_page(0);
      waves::LCD::GetInstance()->StopDMA();
      waves::LCD::GetInstance()->Write_Instruction(0xaf);
    }
    // SetFlag(&_EREG_, _TXTC_, FLAG_SET);

    // if(GetFlag(&_EREG_, _RXTC_)) {
      // waves::LCD::GetInstance()->StopDMA();
    // }
  }
}

  
}
